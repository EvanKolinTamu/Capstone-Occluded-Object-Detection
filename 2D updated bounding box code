import cap as cap
import cv2

thres = 0.45 #threshold to detect object
#reading in the coco file for object names
classNames = []
classFile = ‘coco.names’

#extracting names of the file using loop

with open(classFile, ‘rt’) as f:
	classNames = f.read().rstrip(‘\n’).split(‘\n’)

#creating a path and weight
#will have to change configPath with complete raspberry pi path
# both paths below will change when trained data set is complete

configPath = ‘ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt’
weightsPath = ‘frozen_inference_graph.pb’

# setting values for detection
net = cv2.dnn_DetectionModel(weightsPath, configPath)
net.setInputSize(320, 320)
net.setInputScale(1.0 / 127.5)
net.setInputmean((127.5, 127.5, 127.5))
net.setInputSwapRB(True)

def getObjects(img) :

	classIds, confs, bbox = net.detect(img, confThreshold = thres)
	
	# will give us the confident values the bounding boxes and the accuracy for the bounding boxes
	# creating the bounding boxes and labeling the objects

	if len(classIds) != 0:
		for classId, confidence, box in zip(classIds.flatten(), confs.flatten(), bbox)
			cv2.rectangle(img, box, color = (0, 255, 0), thickness = 2)
			cv2.putText(img, classNames[classId-1].upper(), (box[0] + 10, box[1] + 30),
				cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)
			cv2.putText(img, str(round(confidence * 100, 2)), (box[0] + 0, box[1] + 30),
				cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)
	

	return img

		


if __name__ == “__main__”:

	cap = cv2.VideoCapture(0)      # attaching webcam
	cap.set(3, 640)  # width
	cap.set(4, 480)  # height

	while True:
		success, img = cap.read()   #reading the image
		result = getObjects(img)   
		cv2.imshow(“Output”, img)  #showing the image with the bounding box and labels
		cv2.waitKey(1)




